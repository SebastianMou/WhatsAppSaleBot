from google import genai
from django.conf import settings
from .models import WhatsAppMessage, WhatsAppContact
import logging

logger = logging.getLogger(__name__)

class WhatsAppAIService:
    def __init__(self):
        try:
            # Configure new Gemini client
            if not hasattr(settings, 'GEMINI_API_KEY') or not settings.GEMINI_API_KEY:
                raise ValueError("GEMINI_API_KEY not found in Django settings")
            
            self.client = genai.Client(api_key=settings.GEMINI_API_KEY)
            logger.info("Gemini AI service initialized successfully with new API")
        except Exception as e:
            logger.error(f"Failed to initialize Gemini AI: {str(e)}")
            raise
    
    def generate_response(self, contact_id, max_messages=10):
        """
        Generate an AI response based on conversation history for a specific contact
        Each conversation is isolated - no cross-conversation contamination
        """
        try:
            logger.info(f"Generating response for contact_id: {contact_id}")
            
            # Get contact and recent messages
            try:
                contact = WhatsAppContact.objects.get(id=contact_id)
                logger.info(f"Found contact: {contact.name or contact.phone_number}")
            except WhatsAppContact.DoesNotExist:
                logger.error(f"Contact with id {contact_id} not found")
                return {
                    'success': False,
                    'error': f'Contact with id {contact_id} not found'
                }
            
            # Get messages for THIS SPECIFIC CONTACT ONLY
            messages = WhatsAppMessage.objects.filter(
                contact=contact
            ).order_by('-timestamp')[:max_messages]
            
            logger.info(f"Found {len(messages)} messages for contact {contact_id}")
            
            # Build conversation context (isolated to this contact)
            conversation_history = []
            for message in reversed(messages):  # Reverse to get chronological order
                role = "Cliente" if message.is_incoming else "Sebastian"
                conversation_history.append(f"{role}: {message.content}")
            
            if not conversation_history:
                logger.warning(f"No conversation history found for contact {contact_id}")
                return {
                    'success': False,
                    'error': 'No conversation history found'
                }
            
            # Create the prompt with IZZI instructions
            prompt = self.build_izzi_prompt(contact, conversation_history)
            logger.info(f"Built IZZI prompt for contact {contact_id}, conversation length: {len(conversation_history)}")
            
            # Generate response using NEW Gemini API
            try:
                response = self.client.models.generate_content(
                    model="gemini-2.0-flash-exp",  # Updated model name
                    contents=[prompt]
                )
                logger.info("Successfully generated AI response")
            except Exception as e:
                logger.error(f"Gemini API error: {str(e)}")
                return {
                    'success': False,
                    'error': f'AI generation failed: {str(e)}'
                }
            
            if response.text:
                return {
                    'success': True,
                    'response': response.text.strip(),
                    'conversation_length': len(conversation_history),
                    'contact_id': contact_id
                }
            else:
                logger.warning("Gemini returned empty response")
                return {
                    'success': False,
                    'error': 'No response generated by AI'
                }
                
        except Exception as e:
            logger.error(f"AI Service Error for contact {contact_id}: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def build_izzi_prompt(self, contact, conversation_history):
        """
        Build the AI prompt with IZZI-specific context and instructions
        This ensures the AI follows IZZI sales process and guidelines
        """
        contact_name = contact.name or contact.phone_number
        
        prompt = f"""
            ## Instrucciones Chatbot Ventas IZZI

            ### Identidad
            - Eres un asesor de internet amigable y conversacional llamado Sebastian Mauricio.
            - Tu objetivo es vender servicios IZZI por WhatsApp de forma natural y efectiva.

            ### Estilo de comunicaci√≥n
            - Mensajes cortos (1-3 oraciones m√°ximo).
            - Tono casual y humano, nunca rob√≥tico.
            - Usa 1-2 emojis ocasionales (no en cada mensaje).
            - Evita listas, vi√±etas o formatos complejos.

            ### Paquetes principales
            - **2P (6 meses promoci√≥n):** 
                60MB (+80MB adicionales) Precio de lista $389, promoci√≥n de 3 meses $349
                80MB (+100MB adicionales) Precio de lista $510, promoci√≥n de 3 meses $419
                100MB (+150MB adicionales) Precio de lista $540, promoci√≥n de 3 meses $439
                150MB (+200MB adicionales) Precio de lista $610, promoci√≥n de 3 meses $509
                200MB (+500MB adicionales) Precio de lista $670, promoci√≥n de 3 meses $569
                500MB (+1000MB adicionales) Precio de lista $790, promoci√≥n de 3 meses $689
                1000MB Precio de lista $990, promoci√≥n de 3 meses $889

            - **3P (6 meses promoci√≥n):** 
                60MB (+80MB adicionales) Precio de lista $539, promoci√≥n de 6 meses $499
                80MB (+100MB adicionales) Precio de lista $690, promoci√≥n de 6 meses $599
                100MB (+150MB adicionales) Precio de lista $720, promoci√≥n de 6 meses $619
                150MB (+200MB adicionales) Precio de lista $790, promoci√≥n de 6 meses $689
                200MB (+500MB adicionales) Precio de lista $850, promoci√≥n de 6 meses $749
                500MB (+1000MB adicionales) Precio de lista $970, promoci√≥n de 6 meses $869
                1000MB Precio de lista $1,170, promoci√≥n de 6 meses $1,069

            ### Promociones importantes
            - Instalaci√≥n GRATIS
            - MAX gratis por 12 meses (activar primeros 3 meses)
            - Apple TV+ incluido
            - VIX Premium incluido
            - Domizzilia: $50 descuento mensual de por vida
            - Portabilidad disponible
            - Sin plazos forzosos disponible (seguro de exenci√≥n)

            ### Adicional
            - Izzi TV+ $299 (200 canales) con Sky Sports incluido
            - Promoci√≥n con M√≥vil $79 Extra

            ### Proceso de venta
            1. Saluda de forma casual y pregunta si actualmente tiene alg√∫n servicio de internet contratado.
            2. Si responde, DEBES solicitar su ubicaci√≥n EXACTA usando el mapa de WhatsApp:
            - P√≠dele espec√≠ficamente que comparta su ubicaci√≥n en tiempo real usando la funci√≥n de mapa de WhatsApp
            - Explica que esto es necesario para verificar la cobertura con precisi√≥n
            - Dile c√≥mo compartir su ubicaci√≥n: "Por favor, presiona el clip (üìé) y selecciona 'Ubicaci√≥n' para compartir tu ubicaci√≥n actual"
            3. Cuando recibas un mensaje que dice [UBICACI√ìN COMPARTIDA], confirma que has recibido la ubicaci√≥n y agradece al usuario por compartirla.
            4. DESPU√âS de recibir la ubicaci√≥n, DEBES hacer m√°s preguntas para entender sus necesidades:
            - ¬øCu√°ntos dispositivos conectar√°n al internet?
            - ¬øQu√© tipo de uso le dar√°n? (streaming, videollamadas, juegos, trabajo desde casa, etc.)
            - ¬øCu√°ntas personas usar√°n el servicio?
            - ¬øTienen un presupuesto espec√≠fico en mente?
            - ¬øLes interesa alg√∫n servicio adicional como TV o streaming?
            5. Basado en toda esta informaci√≥n, recomienda el paquete m√°s adecuado con su precio espec√≠fico y beneficios.
            6. IMPORTANTE: Cuando el cliente acepte un paquete espec√≠fico y est√© listo para proceder, NO solicites documentaci√≥n.
            En su lugar, env√≠a el siguiente mensaje EXACTO y luego termina la conversaci√≥n:
            "¬°Perfecto! D√©jame verificar la cobertura exacta en tu zona. Dame un momento mientras confirmo la disponibilidad del servicio... ‚è≥"

            ### REGLA CR√çTICA PARA TERMINAR LA CONVERSACI√ìN
            - NUNCA pidas INE, comprobante de domicilio o informaci√≥n personal
            - Cuando el cliente acepte un paquete espec√≠fico, √öNICAMENTE env√≠a el mensaje sobre verificar cobertura
            - NO contin√∫es la conversaci√≥n despu√©s de enviar ese mensaje
            - NO pidas documentaci√≥n
            - NO hables sobre c√≥digos de verificaci√≥n
            - NO expliques siguientes pasos o procesos

            ### Restricciones
            - No ofrecer servicios fuera de paquetes oficiales
            - SIEMPRE verificar cobertura mediante la ubicaci√≥n exacta del mapa de WhatsApp
            - No aceptar solo nombres de colonias o calles, INSISTIR en la ubicaci√≥n por mapa
            - No compartir precios incorrectos
            - No crear promociones no autorizadas
            - NUNCA solicitar documentaci√≥n personal (INE, comprobante de domicilio)
            - DETENER la conversaci√≥n despu√©s del mensaje de verificaci√≥n de cobertura

            CONTEXTO DEL CLIENTE:
            - Cliente: {contact_name}
            - Tel√©fono: {contact.phone_number}
            - Esta es una conversaci√≥n de WhatsApp Business

            HISTORIAL DE CONVERSACI√ìN (SOLO ESTE CLIENTE):
            {chr(10).join(conversation_history) if conversation_history else "Sin mensajes previos"}

            INSTRUCCIONES FINALES:
            1. Responde como Sebastian Mauricio siguiendo exactamente el proceso de venta IZZI
            2. Mant√©n el tono casual y conversacional apropiado para WhatsApp
            3. Sigue la secuencia: saludo ‚Üí servicio actual ‚Üí ubicaci√≥n ‚Üí necesidades ‚Üí recomendaci√≥n ‚Üí cierre
            4. Si el cliente acepta un paquete, env√≠a SOLO el mensaje de verificaci√≥n de cobertura y no agregues nada m√°s
            5. NUNCA solicites documentaci√≥n personal

            Genera tu respuesta como Sebastian Mauricio ahora:
            """
        
        return prompt
    
    def generate_multiple_responses(self, contact_id, count=3):
        """
        Generate multiple response options for the same conversation
        All responses are based on the SAME isolated conversation
        """
        responses = []
        for i in range(count):
            logger.info(f"Generating response {i+1}/{count} for contact {contact_id}")
            result = self.generate_response(contact_id)
            if result['success']:
                responses.append(result['response'])
            else:
                # If one fails, try a fallback response
                responses.append(self.get_izzi_fallback_response())
        
        return {
            'success': True,
            'responses': responses,
            'contact_id': contact_id
        }
    
    def get_izzi_fallback_response(self):
        """
        IZZI-specific fallback responses when AI fails
        """
        fallbacks = [
            "¬°Hola! üëã ¬øActualmente cuentas con una compa√±√≠a o servicio de internet?",
            "¬°Hola! Soy Sebastian de IZZI. ¬øTe interesa conocer nuestros paquetes de internet? üì±",
            "¬°Hola! ¬øC√≥mo est√°s? ¬øActualmente tienes servicio de internet en casa?"
        ]
        import random
        return random.choice(fallbacks)
    
    # Keep the original build_prompt method for backward compatibility if needed
    def build_prompt(self, contact, conversation_history):
        """
        Original generic prompt builder (kept for compatibility)
        Use build_izzi_prompt for IZZI-specific conversations
        """
        return self.build_izzi_prompt(contact, conversation_history)